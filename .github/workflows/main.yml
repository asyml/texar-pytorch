name: Python Build

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ 3.6, 3.7 ]
        torch-version: [ 1.0.1, 1.1.0, 1.2.0, 1.3.0, 1.4.0]
        exclude:
          - python-version: 3.6
            torch-version: 1.0.1
          - python-version: 3.6
            torch-version: 1.2.0
          - python-version: 3.6
            torch-version: 1.3.0
          - python-version: 3.6
            torch-version: 1.4.0
        include:
          - python-version: 3.8
            torch-version: 1.7.1
          - python-version: 3.8
            torch-version: 1.8.1
          - python-version: 3.9
            torch-version: 1.8.1

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Cache pip
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('setup.py') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            ${{ runner.os }}-
      - name: Install dependencies
        run: |
          python -m pip install --progress-bar off --upgrade pip
          pip install --progress-bar off torch==${{ matrix.torch-version }}
          pip install --progress-bar off .[extras]
          if [[ ${{ matrix.torch-version }} == "1.4.0" ]]; then pip install pylint==2.4.4 flake8==3.7.9; fi
          if [[ ${{ matrix.torch-version }} != "1.0.1" ]]; then pip install mypy==0.790; fi
          pip install pytest
          pip install --progress-bar off coverage codecov
      - name: Linting pylint and flake8 if torch version is 1.4.0
        run: |
          if [[ ${{ matrix.torch-version }} == "1.4.0" ]]; then pylint texar/ examples/; fi
          if [[ ${{ matrix.torch-version }} == "1.4.0" ]]; then flake8 texar/ examples/; fi
      - name: Linting with mypy if torch versoin is not 1.0.1
        run: |
          if [[ ${{ matrix.torch-version }} != "1.0.1" && ${{ matrix.torch-version }} != "1.7.1" && ${{ matrix.torch-version }} != "1.8.1" ]]; then mypy .; fi
          if [[ ${{ matrix.torch-version }} != "1.0.1" && ${{ matrix.torch-version }} != "1.7.1" && ${{ matrix.torch-version }} != "1.8.1" ]]; then _rc=0; for dir in `echo examples/**/`; do mypy $dir || _rc=$?; done && [[ $_rc == 0 ]]; fi
      - name: Test with pytest and run coverage
        run: |
          coverage run -m pytest
      - name: Upload to codecov
        run: |
          codecov
  docs:
    needs: build
    runs-on: ubuntu-latest
    env:
      python-version: 3.7
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ env.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.python-version }}
      - name: Cache pip
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('setup.py') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            ${{ runner.os }}-
      - name: Install dependencies
        run: |
          python -m pip install --progress-bar off --upgrade pip
          pip install --progress-bar off -r requirements.txt
          pip install --progress-bar off .[extras]
          pip install --progress-bar off -r docs/requirements.txt
      - name: Build Docs
        run: |
          cd docs
          sphinx-build -W -b html -d _build/doctrees . _build/html
          sphinx-build -W -b spelling -d _build/doctrees . _build/spelling
  deploy:
    needs: [ build, docs ]
    runs-on: ubuntu-latest
    env:
      python-version: 3.7
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ env.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.python-version }}
      - name: Install pypa/build
        run: |
          python -m pip install build --user
      - name: Build a binary wheel and a source tarball
        run: |
          python -m build --sdist --wheel --outdir dist/ .
      - name: Publish Python üêç distributions üì¶ to Test PyPI
        # Upload only on tagged commits.
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          repository_url: https://test.pypi.org/legacy/
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
      - name: Publish Python üêç distributions üì¶ to PyPI
        # Upload only on tagged commits.
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}